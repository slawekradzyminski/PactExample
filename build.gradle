import com.wiredforcode.gradle.spawn.*

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.2.0.RELEASE'
        classpath 'au.com.dius:pact-jvm-provider-gradle:4.0.1'
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.8.1'
        classpath 'org.ajoberstar.grgit:grgit-gradle:4.0.0-rc.1'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'au.com.dius.pact'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.wiredforcode.spawn'
    apply plugin: 'org.ajoberstar.grgit'

    repositories {
        mavenCentral()
    }
}

ext {
    gitBranch = grgit.branch.current().name
    gitAbbRevision = grgit.head().abbreviatedId
    pactUrl = "http://localhost:9292"
    requestVerification = false
}

task setupPactBroker(type: Exec) {
    commandLine "pactbroker/runPactBroker.sh"
}

task createProvider {
    doLast {
        def post = new URL("${pactUrl}/pacticipants").openConnection()
        def message = '{"name":"ExampleProvider"}'
        post.setRequestMethod("POST")
        post.setDoOutput(true)
        post.setRequestProperty("Content-Type", "application/json")
        post.getOutputStream().write(message.getBytes("UTF-8"))
        String postRC = post.getResponseCode()
        println(postRC)
    }
}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.10'
        annotationProcessor 'org.projectlombok:lombok:1.18.10'

        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-devtools'
        compile 'org.springframework.boot:spring-boot-starter-jetty'
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.json:json:20190722'
        compile 'io.springfox:springfox-swagger2:2.9.2'
        compile 'io.springfox:springfox-swagger-ui:2.9.2'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'junit:junit'
        testCompile 'au.com.dius:pact-jvm-consumer-junit:4.0.1'
        testCompile 'au.com.dius:pact-jvm-consumer-java8:4.0.1'
        testCompile 'au.com.dius:pact-jvm-provider-spring:4.0.1'
        testCompile 'org.assertj:assertj-core:3.13.2'
        testCompile 'com.github.tomakehurst:wiremock:2.25.1'
    }

}

project(':example-consumer-messi') {
    pact {
        publish {
            version = gitBranch + '-' + gitAbbRevision
            pactDirectory = "${buildDir}/pacts"
            pactBrokerUrl = pactUrl
            tags = [gitBranch]
        }
    }
}

project(':example-consumer-ronaldo') {
    pact {
        publish {
            version = gitBranch + '-' + gitAbbRevision
            pactDirectory = "${buildDir}/pacts"
            pactBrokerUrl = pactUrl
            tags = [gitBranch]
        }
    }
}

project(':example-provider') {

    buildscript {
        repositories {
            mavenCentral()
        }

        dependencies {
            classpath 'com.h2database:h2:1.4.200'
        }
    }

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        compile 'com.h2database:h2:1.4.200'
    }

    task startProvider(type: SpawnProcessTask, dependsOn: 'assemble') {
        command "java -Dspring.profiles.active=pact -jar ${buildDir}/libs/example-provider.jar"
        ready 'Started ContractProvider'
    }

    task stopProvider(type: KillProcessTask) {
    }

    pact {
        serviceProviders {
            ExampleProvider {
                providerVersion = { gitBranch + '-' + gitAbbRevision }
                providerTag = { gitBranch }
                protocol = 'http'
                host = 'localhost'
                port = 8080
                path = '/'
                stateChangeUrl = url('http://localhost:8080/pactStateChange')
                startProviderTask = startProvider
                // workaround to disable checking url availability on sync phase
                // See more on https://github.com/DiUS/pact-jvm/tree/master/provider/pact-jvm-provider-gradle
                // Should be fixed in later releases
                if (requestVerification) {
                    hasPactsFromPactBrokerWithTag(pactUrl, "master")
                }
                terminateProviderTask = stopProvider
            }
        }
    }
}
